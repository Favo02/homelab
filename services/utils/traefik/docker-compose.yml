services:

  traefik:
    image: traefik:latest
    container_name: util-traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - './traefik-data/acme.json:/acme.json'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
    ports:
      # read below (entrypoints configurations) for more
      - 80:80
      - 81:81
      - 443:443
      - 444:444
      # dashboard accessible only through reverse proxy
      # - 55555:8080
    environment:
      TZ: ${TIMEZONE}
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
    command:
      - --api.dashboard=true
      - --log.level=debug
      - --log.format=json
      - --accesslog.addInternals=true
      # docker provider
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # letsencrypt dns challenge
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=60
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1
      # plugins and middlewares
      # TODO: umami (traefik-umami-feeder ?)
      # TODO: geoblocking
      # TODO: crowdsec ?
      # internal http: reachable only within LAN
      - --entrypoints.web-in.address=:80
      - --entrypoints.web-in.http.middlewares=lan-only@docker,rate-limit@docker
      - --entrypoints.web-in.http.redirections.entrypoint.to=webs-in
      - --entrypoints.web-in.http.redirections.entrypoint.scheme=https
      # external http: port 80 is mapped to 81 on the router
      - --entrypoints.web-ex.address=:81
      - --entrypoints.web-ex.http.middlewares=rate-limit@docker
      - --entrypoints.web-ex.http.redirections.entrypoint.to=webs-ex
      - --entrypoints.web-ex.http.redirections.entrypoint.scheme=https
      # internal https: reachable only within LAN
      - --entrypoints.webs-in.address=:443
      - --entrypoints.webs-in.http.middlewares=lan-only@docker,rate-limit@docker
      - --entrypoints.webs-in.http.tls=true
      - --entrypoints.webs-in.http.tls.certResolver=letsencrypt
      - --entrypoints.webs-in.http.tls.domains[0].main=favo02.dev
      - --entrypoints.webs-in.http.tls.domains[0].sans=*.favo02.dev
      # external https: port 443 is mapped to 444 on the router
      - --entrypoints.webs-ex.address=:444
      - --entrypoints.webs-ex.http.middlewares=rate-limit@docker
      - --entrypoints.webs-ex.http.tls=true
      - --entrypoints.webs-ex.http.tls.certResolver=letsencrypt
      - --entrypoints.webs-ex.http.tls.domains[0].main=favo02.dev
      - --entrypoints.webs-ex.http.tls.domains[0].sans=*.favo02.dev
    labels:
      # --- common middlewares ---
      - 'traefik.http.middlewares.lan-only.ipallowlist.sourceRange=127.0.0.0/8,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12'
      - 'traefik.http.middlewares.rate-limit.ratelimit.average=100'
      - 'traefik.http.middlewares.rate-limit.ratelimit.burst=500'
      # --- traefik dashboard ---
      - 'traefik.enable=true'
      - 'traefik.http.routers.util-traefik.rule=Host(`traefik.favo02.dev`)'
      - 'traefik.http.routers.util-traefik.service=api@internal'
      - 'traefik.http.routers.util-traefik.entrypoints=webs-in'
      - 'traefik.http.routers.util-traefik.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.util-traefik.middlewares=auth'
      - 'traefik.http.middlewares.auth.basicauth.users=${BASIC_AUTH}'
    # read below (networks setup) for more
    networks:
      - proxy01 # util-portainer
      - proxy02 # util-gotify
      - proxy03 # util-umami
      - proxy04 # service-firefly
      - proxy05 # service-immich
      - proxy06 # website-favo02dev
      - proxy07 # website-socialnetworkformusic
      - proxy08 # website-superunimia
      - proxy09 # service-yamtrack
      - proxy10 # service-homeassistant
      - proxy11 # util-speedtest
      - proxy12 # website-cessadvisorapi
      - proxy13 # website-seelabel
      - proxy14
      - proxy15
      - proxy16
      - proxy17
      - proxy18
      - proxy19
      - proxy20

# Networks that let the proxy communicate with containers without allowing cross-container communications
# More than used are defined to avoid restarting this container when adding a new proxyied service
# All networks should be /30 as only two hosts are needed (proxy and container), but docker includes
# the gateway (I think, the first IP is not the actual first) in each network, so /29 are needed
networks:
  proxy01:
    ipam:
      config:
      - subnet: 10.0.0.0/29
  proxy02:
    ipam:
      config:
      - subnet: 10.0.0.8/29
  proxy03:
    ipam:
      config:
      - subnet: 10.0.0.16/29
  proxy04:
    ipam:
      config:
      - subnet: 10.0.0.24/29
  proxy05:
    ipam:
      config:
      - subnet: 10.0.0.32/29
  proxy06:
    ipam:
      config:
      - subnet: 10.0.0.40/29
  proxy07:
    ipam:
      config:
      - subnet: 10.0.0.48/29
  proxy08:
    ipam:
      config:
      - subnet: 10.0.0.56/29
  proxy09:
    ipam:
      config:
      - subnet: 10.0.0.64/29
  proxy10:
    ipam:
      config:
      - subnet: 10.0.0.72/29
  proxy11:
    ipam:
      config:
      - subnet: 10.0.0.80/29
  proxy12:
    ipam:
      config:
      - subnet: 10.0.0.88/29
  proxy13:
    ipam:
      config:
      - subnet: 10.0.0.96/29
  proxy14:
    ipam:
      config:
      - subnet: 10.0.0.104/29
  proxy15:
    ipam:
      config:
      - subnet: 10.0.0.112/29
  proxy16:
    ipam:
      config:
      - subnet: 10.0.0.120/29
  proxy17:
    ipam:
      config:
      - subnet: 10.0.0.128/29
  proxy18:
    ipam:
      config:
      - subnet: 10.0.0.136/29
  proxy19:
    ipam:
      config:
      - subnet: 10.0.0.144/29
  proxy20:
    ipam:
      config:
      - subnet: 10.0.0.152/29
